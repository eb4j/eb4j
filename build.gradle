plugins {
    id 'java-library'
    id 'java-library-distribution'
    id 'distribution'
    id 'jacoco'
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id 'org.asciidoctor.jvm.convert' version '3.1.0'
    id 'com.palantir.git-version' version "0.12.3"
}

// calculate version string from git tag, hash and commit distance
if (versionDetails().isCleanTag) {
    // drop first 'v' from version tag
    version = gitVersion().substring(1)
} else {
    version = versionDetails().lastTag.substring(1) + '-' + versionDetails().commitDistance + '-' + versionDetails().gitHash + '-SNAPSHOT'
}

group = 'io.github.eb4j'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
    withJavadocJar()
}

// use asciidoc for javadoc
configurations {
    doclet
}

dependencies {
    doclet 'org.asciidoctor:asciidoclet:1.+'
    implementation 'commons-lang:commons-lang:2.6'
    api 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.slf4j:slf4j-nop:1.7.25'
    testImplementation 'org.slf4j:slf4j-nop:1.7.25'
    testImplementation 'org.testng:testng:6.9.10'
}
test.useTestNG()

checkstyle {
    config = resources.text.fromFile("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    toolVersion = '6.16.1'
}

javadoc {
    options.docletpath = configurations.doclet.files.asType(List)
    options.doclet = 'org.asciidoctor.Asciidoclet'
    options.setLocale("en")
    options.addStringOption "-base-dir", "${projectDir}"
    options.addStringOption "-attribute",
            "name=${project.name}," + "lang=ja," +
            "version=${project.version}," +
            "title-link=https://eb4j.github.io/eb4j[${project.name} ${project.version}]"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = "EB4J"
                description = "EPWING/Ebook access library"
                url = "https://github.com/eb4j/eb4j"
                licenses {
                    license {
                        name = "The GNU Lesser General Public License, Version 2.1"
                        url = "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        id = "miurahr"
                        name = "Hiroshi Miura"
                        email = "miurahr@linux.com"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/eb4j/eb4j.git"
                    developerConnection = "scm:git:git://github.com/eb4j/eb4j.git"
                    url = "https://github.com/eb4j/eb4j"
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = "a1d1cd5a9c0ab"
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = project.hasProperty('sonatypeUsername') ? project.property('sonatypeUsername') : System.getenv('SONATYPE_USER')
            password = project.hasProperty('sonatypePassword') ? project.property('sonatypePassword') : System.getenv('SONATYPE_PASS')
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if (signingKey) {
        useInMemoryPgpKeys(signingKey, signingPassword)
    } else {
        useGpgCmd()
    }
    sign publishing.publications.mavenJava
}
tasks.withType(Sign) {
    def hasKey = project.hasProperty("signingKey") || project.hasProperty("signing.gnupg.keyName")
    onlyIf { hasKey && versionDetails().isCleanTag }
}

distTar {
    compression = Compression.GZIP
}

distributions {
    main {
        contents {
            from('README.md', 'LICENSE.txt')
        }
    }
}

// docs - github pages generation
asciidoctor {
    sourceDir  file('docs')
    sources {
        include 'index.adoc', 'about.adoc', 'links.adoc', 'reports.adoc'
    }
    outputDir  file('build/docs')
    attributes 'build-gradle': file('build.gradle'),
            'endpoint-url': 'http://eb4j.github.io/eb4j/',
            'source-highlighter': 'coderay',
            'imagesdir': 'images',
            'toc': 'left',
            'icons': 'font',
            'setanchors': 'true',
            'idprefix': '',
            'idseparator': '-',
            'docinfo1': 'true'
}
